<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wangb&#39;s blog</title>
  
  
  <link href="https://wangbinyq.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangbinyq.github.io/"/>
  <updated>2021-09-28T09:26:17.826Z</updated>
  <id>https://wangbinyq.github.io/</id>
  
  <author>
    <name>wangb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ASP.NET 中 AddTransient AddScoped AddSingleton 的区别</title>
    <link href="https://wangbinyq.github.io/addtransient-addscoped-addsingleton/"/>
    <id>https://wangbinyq.github.io/addtransient-addscoped-addsingleton/</id>
    <published>2021-09-24T10:40:15.000Z</published>
    <updated>2021-09-28T09:26:17.826Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>.NET</code> 中依赖注入有三种生命周期:</p><ul><li><code>Singleton</code> 在程序运行时只创建一个对象实例. 它会在第一次使用该对象时创建, 之后的所有请求获取的都是同一个对象. 由于单例是全局存在的, 如果这种 <code>Service</code> 里面发生了内存泄漏, 会影响到整个程序.</li><li><code>Scoped</code> 我们称 <code>ASP.NET</code> 每一个请求创建了一个 <code>scope</code>, 因此对于 <code>Scoped</code> 生命周期会在当前请求生效. 即每一个请求都会创建一个新的实例, 但是在一个请求中所有实例都相同. 适用于一个请求中保存状态.</li><li><code>Transient</code> 在每次获取实例时都创建一个新的实例. 所以它会占用比较多的内存和资源, 对性能产生影响. 只适合无状态的轻量级的 <code>Service</code>.</li></ul><span id="more"></span>]]></content>
    
    
    <summary type="html">ASP.NET 中 AddTransient AddScoped AddSingleton 的区别</summary>
    
    
    
    <category term="ASP.NET" scheme="https://wangbinyq.github.io/categories/ASP-NET/"/>
    
    
    <category term="ASP.NET" scheme="https://wangbinyq.github.io/tags/ASP-NET/"/>
    
    <category term="依赖注入" scheme="https://wangbinyq.github.io/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
    <category term="生命周期" scheme="https://wangbinyq.github.io/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>在 ASP.NET 中使用生成 Swagger 文档和 Typescript 客户端程序</title>
    <link href="https://wangbinyq.github.io/openapi-codegen-aspnet/"/>
    <id>https://wangbinyq.github.io/openapi-codegen-aspnet/</id>
    <published>2021-09-23T02:30:20.000Z</published>
    <updated>2021-09-28T09:26:17.826Z</updated>
    
    <content type="html"><![CDATA[<p>本文将使用 ASP.NET 创建一个 WebApi 程序, 并使用 <a href="https://www.nuget.org/packages?q=Swashbuckle"><code>Swashbuckle</code></a> 生成 Swagger 文档和对应的 Typescript 客户端程序, 同时创建一个 <code>Angular</code> 客户端程序调用生成的 Api. 示例代码在 <a href="https://github.com/wangbinyq/aspnet-swagger-codegen-example">aspnet-swagger-codegen-example</a>.</p><span id="more"></span><h2><span id="webapi-程序">WebApi 程序</span></h2><p>首先使用 <code>dotnet cli</code> 创建一个 WebApi 程序:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet new webapi -o Swagger</span><br></pre></td></tr></table></figure><p>可以看到 WebApi 的模板已经自动帮我们设置好了 Swagger.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.SwaggerDoc(&quot;v1&quot;, new() &#123; Title = &quot;Swagger&quot;, Version = &quot;v1&quot; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">if (app.Environment.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;Swagger v1&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在开始之前, 先对 <code>appsettings.json</code> 添加 <code>Urls</code> 配置:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;Urls&quot;</span>: <span class="string">&quot;http://localhost:5001&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们固定 Api 程序的监听端口, 方便后面客户端使用. 现在我们通过命令 <code>dotnet watch run</code> 启动程序. NET6 中使用 <code>watch</code> 命令可以获得 <code>hot reload</code> 支持. 在浏览器中打开 <code>http://localhost:5001/swagger/index.html</code> 可以看到自带的 <code>WeatherForecast</code> 的接口文档了.</p><p>点击接口可以看到接口定义的出参入参, 再点击 <code>Try it out</code> 然后点击 <code>Execute</code>, <code>Responses</code> 中就显示接口返回的数据.</p><p><img src="%22/image/aspnet-openapi/swagger-1.png" alt="接口返回数据"></p><h3><span id="添加接口">添加接口</span></h3><p>在 <code>Models</code> 文件夹中定义新接口的模型: <code>CountResponse.cs</code> 和 <code>CountPostResponse.cs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespace Swagger.Models;</span><br><span class="line"></span><br><span class="line">public class CountResponse</span><br><span class="line">&#123;</span><br><span class="line">    public int Count &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespace Swagger.Models;</span><br><span class="line"></span><br><span class="line">public class CountPostRequest</span><br><span class="line">&#123;</span><br><span class="line">    public int Add &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>Controllers</code> 文件夹中添加 <code>CountController.cs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Mvc;</span><br><span class="line">using Swagger.Models;</span><br><span class="line"></span><br><span class="line">namespace Swagger.Controllers;</span><br><span class="line"></span><br><span class="line">[ApiController]</span><br><span class="line">[Route(&quot;[controller]&quot;)]</span><br><span class="line">public class CountController</span><br><span class="line">&#123;</span><br><span class="line">    private static int _count = 0;</span><br><span class="line"></span><br><span class="line">    [HttpGet]</span><br><span class="line">    public CountResponse Get()</span><br><span class="line">    &#123;</span><br><span class="line">        return new CountResponse</span><br><span class="line">        &#123;</span><br><span class="line">            Count = _count</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [HttpPost]</span><br><span class="line">    public CountResponse Post(CountPostRequest req)</span><br><span class="line">    &#123;</span><br><span class="line">        Interlocked.Add(ref _count, req.Add);</span><br><span class="line"></span><br><span class="line">        return new CountResponse</span><br><span class="line">        &#123;</span><br><span class="line">            Count = _count</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷新浏览器, 就可以看到新添加的接口已经存在了</p><p><img src="%22/image/aspnet-openapi/swagger-2.png" alt="新接口"></p><h2><span id="客户端程序">客户端程序</span></h2><p>首先我们修改 <code>cjproj</code> 文件, 添加如下字段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Watch</span> <span class="attr">Remove</span>=<span class="string">&quot;Client\**\*&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Watch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样 <code>watch</code> 命令就不会监听客户端程序文件的变动, 然后输入命令 <code>ng new Client</code> 添加一个 <code>Angular</code> 程序. 接下来我们配置 <code>Angular</code> 的代理服务器. 在 <code>Client</code> 根目录下新建文件 <code>proxy.conf.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;/api&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;http://localhost:5001&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;secure&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;pathRewrite&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>angular.json</code>, 添加 <code>proxyConfig</code> 项:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;architect&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;builder&quot;</span>: <span class="string">&quot;@angular-devkit/build-angular:dev-server&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;proxyConfig&quot;</span>: <span class="string">&quot;proxy.conf.json&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过 <code>yarn start</code> 启动.</p><h2><span id="swagger-codegen">Swagger CodeGen</span></h2><p>生成 Api 客户端代码的方式有许多, 可以使用工具从 OpenAPI 文档生成, 另外就是使用 <a href="https://github.com/RicoSuter/NSwag/wiki/TypeScriptClientGenerator"><code>NSwag.CodeGeneration.TypeScript</code></a> 直接从代码生成.</p><p>先来看工具生成的方式, 我们选择的是 <a href="https://github.com/RicoSuter/NSwag/wiki/NSwagStudio"><code>NSwagStudio</code></a> 来生成 Api 的客户端代码. 从该<a href="https://github.com/RicoSuter/NSwag/wiki/NSwagStudio">链接</a>下载并安装 <code>NSwagStudio</code>. 打开 <code>NSwagStduio</code> 后, 左边是 OpenAPI 定义的输入, 右边是客户端生成程序的输出. 我们选择使用 <code>OpenAPI/Swagger Specification</code> 作为输入, 在 <code>URL</code> 中填写我们的 OpenAPI 定义 json 文件路径 <code>http://localhost:5001/swagger/v1/swagger.json</code>, 然后勾选 <code>Typescript Client</code> 作为输出, <code>Template</code> 选择 <code>Angular</code>. 最后点击 <code>Generate Output</code></p><p><img src="%22/image/aspnet-openapi/swagger-3.png" alt="NSwagStudio"></p><p>然后复制右边 <code>Output</code> 标签中的内容到 <code>Client/client.ts</code> 中保存.</p><p>在我们调用接口之前还需要做一点设置, 即注入 <code>API_BASE_URL</code> 和 <code>Client</code>, 修改 <code>app.module.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    AppComponent,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    HttpClientModule,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123; <span class="attr">provide</span>: API_BASE_URL, <span class="attr">useValue</span>: <span class="string">&#x27;/api&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">provide</span>: Client &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>现在我们就可以在 <code>Angular</code> 中调用 <code>WebApi</code> 的接口了. 修改 <code>app.component.html</code> 和 <code>app.component.ts</code> 为:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  count: &#123;&#123; (count$ | async)?.count &#125;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;postCount(1)&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;postCount(10)&quot;</span>&gt;</span>+10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;  tap &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Client, CountResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;src/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.scss&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  title = <span class="string">&#x27;Client&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  count$?: Observable&lt;CountResponse&gt;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> client: Client</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">ngOnInit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.count$ = <span class="built_in">this</span>.client.countGET()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getCount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.count$ = <span class="built_in">this</span>.client.countGET()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">postCount</span>(<span class="params">add: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.client.countPOST(&#123;</span><br><span class="line">      add,</span><br><span class="line">    &#125;).pipe(</span><br><span class="line">      tap(<span class="function">() =&gt;</span> <span class="built_in">this</span>.getCount())</span><br><span class="line">    ).subscribe()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就获得类型安全的客户端 Api 代码.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文将使用 ASP.NET 创建一个 WebApi 程序, 并使用 &lt;a href=&quot;https://www.nuget.org/packages?q=Swashbuckle&quot;&gt;&lt;code&gt;Swashbuckle&lt;/code&gt;&lt;/a&gt; 生成 Swagger 文档和对应的 Typescript 客户端程序, 同时创建一个 &lt;code&gt;Angular&lt;/code&gt; 客户端程序调用生成的 Api. 示例代码在 &lt;a href=&quot;https://github.com/wangbinyq/aspnet-swagger-codegen-example&quot;&gt;aspnet-swagger-codegen-example&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="ASP.NET" scheme="https://wangbinyq.github.io/categories/ASP-NET/"/>
    
    
    <category term="ASP.NET" scheme="https://wangbinyq.github.io/tags/ASP-NET/"/>
    
    <category term="Swagger" scheme="https://wangbinyq.github.io/tags/Swagger/"/>
    
    <category term="Angular" scheme="https://wangbinyq.github.io/tags/Angular/"/>
    
    <category term="客户端" scheme="https://wangbinyq.github.io/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>理解 Angular 依赖注入</title>
    <link href="https://wangbinyq.github.io/ng-di/"/>
    <id>https://wangbinyq.github.io/ng-di/</id>
    <published>2018-11-22T16:54:00.000Z</published>
    <updated>2021-09-28T09:26:17.826Z</updated>
    
    <content type="html"><![CDATA[<p><code>Angular</code> 程序开发中 <code>Provider</code> 和依赖注入是两个非常重要的概念, 关系到我们如何编写程序. 本文将解释 <code>@Inject()</code>, <code>@Injectable()</code> 两个装饰器背后的原理和它们的使用场景, 以及 <code>Angular</code> 依赖注入框架中的 <code>token</code>, <code>provider</code> 和 <code>Angular</code> 是如何创建依赖的.</p><span id="more"></span><h2><span id="注入-providers">注入 providers</span></h2><p><code>Angular</code> 的依赖注入背后有很多魔法发生. <code>Angular 1.x</code> 时代我们可以通过字符串 token 来获取指定的依赖.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SomeController</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// use $scope</span></span><br><span class="line">&#125;</span><br><span class="line">SomeController.$inject = [<span class="string">&#x27;$scope&#x27;</span>]</span><br></pre></td></tr></table></figure><p>你可以通过之前的<a href="https://toddmotto.com/angular-js-dependency-injection-annotation-process/">文章</a>来获取更多信息.</p><p>虽然这种方式曾经很好, 但是也存在一些缺陷. 通常我们会通过创建各种模块 (<code>Module</code>) 和引用其他模块 (比如 <code>ui-router</code>) 来构建我们的程序. 不同的模块中的 controllers/services 不能用相同的名字, 否则就会发成冲突.</p><p>幸运的是,新的  <code>Angular</code> 重写了依赖注入系统, 使其更强大更灵活.</p><h3><span id="新的依赖注入系统">新的依赖注入系统</span></h3><p>当需要注入服务 (<code>provider</code>) 到组件或其他服务中时, 我们在构造函数中指定需要注入的类型. 比如:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;exmaple-component&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;I am a component&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> http: Http</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// use `this.http` which is the Http provider</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入的类型标记为 <code>Http</code>, <code>Angular</code> 能自动将其赋值给 <code>http</code>.</p><p>这看起来非常的神奇. 类型标记只在 <code>TypeScript</code> 中存在, 当程序转译成 <code>JavaScript</code> 并在浏览器中运行时, 我们对 <code>http</code> 参数毫无所知 (在运行时 <code>http</code> 可以为任何对象).</p><p>我们需要将 <code>tsconfig.json</code> 中的 <code>emitDecoratorMetadata</code> 设成 <code>true</code>. 这样在转译后的 <code>JavaScript</code> 的代码中, 会将参数类型加到装饰器上.</p><p>我们来看转译后的 <code>JavaScript</code> 代码 (ES6):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ExampleComponent = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ExampleComponent</span>(<span class="params">http</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.http = http;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ExampleComponent;</span><br><span class="line">&#125;)();</span><br><span class="line">ExampleComponent = __decorate(</span><br><span class="line">  [</span><br><span class="line">    Component(&#123;</span><br><span class="line">      <span class="attr">selector</span>: <span class="string">&#x27;example-component&#x27;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;I am a component&lt;/div&gt;&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    __metadata(<span class="string">&#x27;design:paramtypes&#x27;</span>, [Http]),</span><br><span class="line">  ],</span><br><span class="line">  ExampleComponent</span><br><span class="line">);<span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;exmaple-component&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;I am a component&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">private http: Http</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// use `this.http` which is the Http provider</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们能看到转译后的代码中 <code>http</code> 对应上了 <code>@angualr/http</code> 中的 <code>Http</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__metadata(<span class="string">&#x27;design:paramtypes&#x27;</span>, [Http]);</span><br></pre></td></tr></table></figure><p>最终 <code>@Component</code> 装饰器转译成了 ES 代码, 并通过 <code>__decorate</code> 附加了一些元信息 <code>metadata</code>. 这些信息能告诉 <code>Angular</code> 要将 <code>Http</code> 传递给组件的构造函数, 并最终赋值给 <code>this.http</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleComponent</span>(<span class="params">http</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.http = http;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>metadata</code> 实现了 <code>$inject</code> 中功能, 但是这里作为 <code>token</code> 的是类而不是字符串. 命名冲突就不会发生了.</p><div class="tip">你可能已经听过 token (或者 OpaqueToken) 的概念. Angular 使用 token 来存储或获取 providers. Token 作为 key 来引用 (hash?) provider. 不同于传统的 key, token 可以是任何值作为 key (对象, 字符串, 类等).<div><h3><span id="inject"><code>@Inject()</code></span></h3><p>所以 <code>@Inject</code> 起什么作用呢? 我们将组件改写成:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Inject &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;example-component&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;I am a component&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="meta">@Inject</span>(Http) <span class="keyword">private</span> http</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// use `this.http` which is the Http provider</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一次, 我们通过 <code>@Inject</code> 手动提供 <code>token</code>.</p><p>如果组件或服务需要很多依赖, 这样写会非常的麻烦. <code>Angular</code> 可以通过 <code>metadata</code> 自动找到依赖, 所有大多数情况下我们都不需要使用 <code>@Inject</code>.</p><p>唯一需要 <code>@Inject</code> 的情况是在同时使用 <code>OpaqueToken</code> 对象时.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myToken = <span class="keyword">new</span> OpaqueToken(<span class="string">&#x27;myValue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(...)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> token: myToken</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 <code>myToken</code> 不是类型, 而是值. 这意味着上面的代码会报错. 但是使用 <code>@Inject</code> 的话就可以了:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myToken = <span class="keyword">new</span> OpaqueToken(<span class="string">&#x27;myValue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(...)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="meta">@Inject</span>(myToken) <span class="keyword">private</span> token</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在不会深入 <code>OpaqueToken</code>, 但是上面的例子足够表明 <code>@Inject</code> 的作用.</p><h3><span id="injectable"><code>@Injectable()</code></span></h3><p>我们并不需要在所有的类上添加 <code>@Injectable</code> 装饰器, 才可以将其注入到组件或服务中. 虽然可能会发生变化, 有一个 <a href="https://github.com/angular/angular/issues/13820">issue</a> 讨论需要强制加上 <code>@Injectable</code> (4.0 已经变成强制需要 <code>@Injectable</code>)</p><p>当我们使用装饰器时, 将被装饰的类的元信息存储成能被 <code>Angular</code> 处理的格式, 这些元信息中就包含了这个类的依赖.</p><p>如果没有使用装饰器添加元信息, <code>Angular</code> 就无从得知类的依赖. 这就是我们为什么需要 <code>@Injectable()</code>. <code>@Injectable()</code> 并没有其他的功能, 仅仅是提供了一些元信息.</p><h2><span id="token-和依赖注入">Token 和依赖注入</span></h2><p>现在我们知道了如何告诉 <code>Angular</code> 需要注入的内容, 现在我们来学习 <code>Angular</code> 如何知道从哪获取依赖以及如何实例化他们.</p><h3><span id="注册-provide">注册 provide</span></h3><p>我们先来看如何注册一个服务到一个 <code>NgModule</code> 上.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [AuthService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>上面例子是下面的简化版:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [&#123;</span><br><span class="line">    <span class="attr">provide</span>: AuthService,</span><br><span class="line">    <span class="attr">useClass</span>: AuthService</span><br><span class="line">  &#125;],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>provide</code> 字段表示我们注册的 provider 的 <code>token</code>. 当 <code>Angular</code> 看到 <code>AuthService</code> <code>token</code> 时, 就会取 <code>useClass</code> 的值进行实例化.</p><p>这样做有很多优点. 其一, 我们可以注册多个相同 <code>class</code> 的 <code>provide</code>, 而且不会发生冲突 (只要 <code>token</code> 不一样); 第二, 我们可以通过相同的 <code>token</code> 来覆盖之前的 <code>provide</code>.</p><h3><span id="覆盖-providers">覆盖 <code>providers</code></span></h3><p>我们的 <code>AuthService</code> 代码如下:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> http: Http</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  authenticateUser(username: <span class="built_in">string</span>, <span class="attr">password</span>: <span class="built_in">string</span>): Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// returns true or false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.http.post(<span class="string">&#x27;/api/auth&#x27;</span>, &#123; username, password &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getUsername(): Observable&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.http.post(<span class="string">&#x27;/api/user&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设我们的程序中使用了这个服务, 例如登录:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;auth-login&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;login()&quot;&gt;</span></span><br><span class="line"><span class="string">      Login</span></span><br><span class="line"><span class="string">    &lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> authService: AuthService</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">login</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.authService</span><br><span class="line">      .authenticateUser(<span class="string">&#x27;toddmotto&#x27;</span>, <span class="string">&#x27;straightouttacompton&#x27;</span>)</span><br><span class="line">      .subscribe(<span class="function">(<span class="params">status: <span class="built_in">boolean</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do something if the user has logged in</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示用户名:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;user-info&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      You are &#123;&#123; username &#125;&#125;!</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> authService: AuthService</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">ngOnInit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.authService</span><br><span class="line">      .getUsername()</span><br><span class="line">      .subscribe(<span class="function">(<span class="params">username: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">this</span>.username = username);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将上面所有代码整合成一个模块, 比如 <code>AuthModule</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; LoginComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./login.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserInfoComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./user-info.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [LoginComponent, UserInfoComponent],</span><br><span class="line">  <span class="attr">providers</span>: [AuthService],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>其他的组件可能也会依赖 <code>AuthService</code>. 现在假设我们有一个新的需求, 需要修改授权方法使得用户可以通过 Facebook 登录.</p><p>一种方法是修改所有的组件, 将其构造函数中的 <code>AuthService</code> 替换成新的服务. 另外我们也可以通过修改 <code>providers</code> 来将 <code>AuthService</code> 覆盖成 <code>FacebookAuthService</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// totally made up</span></span><br><span class="line"><span class="keyword">import</span> &#123; FacebookAuthService &#125; <span class="keyword">from</span> <span class="string">&#x27;@facebook/angular&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; LoginComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./login.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserInfoComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./user-info.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [LoginComponent, UserInfoComponent],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: AuthService,</span><br><span class="line">      <span class="attr">useClass</span>: FacebookAuthService,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这里我们没有采用简写方法, 并且替换了 <code>useClass</code> 的值. 这样在模块中的 <code>AuthService</code> <code>token</code> 就会使用 <code>FacebookAuthService</code> 类.</p><h2><span id="理解注入器-injector">理解注入器 (Injector)</span></h2><p>翻译略 (一些 AOT 源码的解释, 有兴趣的可以研究下).</p><h2><span id="参考资料">参考资料</span></h2><ul><li><a href="http://blog.wolksoftware.com/decorators-reflection-javascript-typescript">装饰器反射相关4篇</a></li></ul></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Angular&lt;/code&gt; 程序开发中 &lt;code&gt;Provider&lt;/code&gt; 和依赖注入是两个非常重要的概念, 关系到我们如何编写程序. 本文将解释 &lt;code&gt;@Inject()&lt;/code&gt;, &lt;code&gt;@Injectable()&lt;/code&gt; 两个装饰器背后的原理和它们的使用场景, 以及 &lt;code&gt;Angular&lt;/code&gt; 依赖注入框架中的 &lt;code&gt;token&lt;/code&gt;, &lt;code&gt;provider&lt;/code&gt; 和 &lt;code&gt;Angular&lt;/code&gt; 是如何创建依赖的.&lt;/p&gt;</summary>
    
    
    
    
    <category term="angular frontend di" scheme="https://wangbinyq.github.io/tags/angular-frontend-di/"/>
    
  </entry>
  
  <entry>
    <title>how to write an anime library</title>
    <link href="https://wangbinyq.github.io/how-to-write-an-anime-library/"/>
    <id>https://wangbinyq.github.io/how-to-write-an-anime-library/</id>
    <published>2018-04-17T13:42:11.000Z</published>
    <updated>2021-09-28T09:26:17.826Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="the-engine">The engine</span></h2><p>We need a mechanism to deal with <a href="https://github.com/wangbinyq/writings/wiki/Html-Reflow-and-Layout-Thrashing">layout thrashing</a>. So we have an engine that group all animations into to a <code>requestAnimationFrame</code> callback.</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> engine = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> animations = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> raf = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">play</span> (<span class="params"></span>) </span>&#123; raf = requestAnimationFrame(step) &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">step</span> (<span class="params"></span>) </span>&#123; animations.forEach(<span class="function">(<span class="params">anim</span>) =&gt;</span> anim.step()); <span class="keyword">if</span> (animations.length) play() &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">anim</span>) </span>&#123; animations.push(anim) &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">remove</span> (<span class="params">anim</span>) </span>&#123; <span class="keyword">const</span> index = animations.indexOf(index); animations.splice(index, <span class="number">1</span>) &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    play, step, add, remove, raf</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2><span id="the-tween-and-animation">The tween and animation</span></h2><p>A tween object repersent a property change. It is an object like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const defaultTweenSetting = &#123;</span><br><span class="line">  target: Element,</span><br><span class="line">  property: string,</span><br><span class="line">  duration: number,</span><br><span class="line">  easing: Function,</span><br><span class="line">  from: number,</span><br><span class="line">  to: number,</span><br><span class="line">  unit: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This object can describe what to be change (<code>target</code>, <code>property</code>), how long it will last (<code>duration</code>), how does the chnage looks like (<code>easing</code>), and the start and end value (<code>from</code>, <code>to</code> and <code>unit</code>).</p><p>An animation object group list of tweens and play the real animation by add it self to the engine and step the tween.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">tweens</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.tweens</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  step (now) &#123;</span><br><span class="line">    <span class="keyword">let</span> elapsed = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.startTime) &#123;</span><br><span class="line">       <span class="built_in">this</span>.startTime = now</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> elapsed = now - <span class="built_in">this</span>.startTime</span><br><span class="line">    finisheds = <span class="built_in">this</span>.tweens.map(<span class="function">(<span class="params">tween</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> process = <span class="built_in">Math</span>.min(<span class="number">1</span>, elapsed / tween.duration)</span><br><span class="line">      <span class="keyword">const</span> eased = tween.easing(process)</span><br><span class="line">      <span class="keyword">const</span> value = tween.from + (tween.to - tween.from) * eased</span><br><span class="line">      tween.target.style[tween.property] = value + tween.unit</span><br><span class="line">      <span class="keyword">if</span> (process &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (finisheds.every(<span class="function">(<span class="params">f</span>) =&gt;</span> f)) &#123;</span><br><span class="line">       <span class="built_in">this</span>.pause()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  play () &#123;</span><br><span class="line">    engine.add(<span class="built_in">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  pause () &#123;</span><br><span class="line">    engine.remove(<span class="built_in">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  restart () &#123;</span><br><span class="line">    <span class="built_in">this</span>.pause()</span><br><span class="line">    <span class="built_in">this</span>.startTime = <span class="number">0</span></span><br><span class="line">    <span class="built_in">this</span>.play()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="the-libraries">The Libraries</span></h2><p>Now we have <code>engine</code>, <code>tween</code> and <code>Animtaion</code>. Use those object or class you can build some style animatons you what to. But it’s not enough, we need construct the <code>tweens</code> ourself and we only support css style property animation.<br>There are some realy awesome animation libraries exist:</p><ul><li><a href="https://github.com/juliangarnier/anime">anime.js</a>: This is what inspire our little animation <code>engine</code> with   more features like <code>transform, svg and object property</code> (we can do it by add a <code>type</code> field to our <code>tween</code> and add the corresponding changes code to  <code>Animation.step</code> function), <code>timeline</code>, <code>can automaticlly transform params to tweens</code> etc.</li><li><a href="http://velocityjs.org/">velocityjs</a>: It’s incredibly fast, and it features color animation, transforms, loops, easings, SVG support, and scrolling.</li><li><a href="https://github.com/drcmda/react-spring">react-spring</a>: data driven animation library.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API">Web Animations API</a>: The W3C</li></ul><h2><span id="others">Others</span></h2><h3><span id="unit-transfrom">Unit transfrom</span></h3><ol><li><a href="https://github.com/jquery/jquery/blob/master/src/css/adjustCSS.js">jquery.adjustCSS</a>: calculate the scale between current unit and the excepted unit, then apply the new united value.</li><li>velocityjs: <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fromUnit !== toUnit) &#123;</span><br><span class="line">  currentValue = <span class="string">`calc(<span class="subst">$&#123;<span class="keyword">from</span> * (<span class="number">1</span> - eased) + fromUnit&#125;</span> + <span class="subst">$&#123;to * eased + toUnit&#125;</span>)`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3><span id="flip-technique">FLIP Technique</span></h3><p>For list reordering stuff.<br><a href="https://aerotwist.com/blog/flip-your-animations/#the-general-approach">https://aerotwist.com/blog/flip-your-animations/#the-general-approach</a></p><blockquote><ul><li>Calculate the <em>First</em> position.</li><li>Calculate the <em>Last</em> position.</li><li><em>Invert</em> the positions</li><li><em>Play</em> the animation</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;The-engine&quot;&gt;&lt;a href=&quot;#The-engine&quot; class=&quot;headerlink&quot; title=&quot;The engine&quot;&gt;&lt;/a&gt;The engine&lt;/h2&gt;&lt;p&gt;We need a mechanism to deal with &lt;a href=&quot;https://github.com/wangbinyq/writings/wiki/Html-Reflow-and-Layout-Thrashing&quot;&gt;layout thrashing&lt;/a&gt;. So we have an engine that group all animations into to a &lt;code&gt;requestAnimationFrame&lt;/code&gt; callback.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>DNS 解析详解</title>
    <link href="https://wangbinyq.github.io/dns/"/>
    <id>https://wangbinyq.github.io/dns/</id>
    <published>2018-02-28T16:36:20.000Z</published>
    <updated>2021-09-28T09:26:17.826Z</updated>
    
    <content type="html"><![CDATA[<p>大家都知道 DNS (Domain Name System, 域名系统), 是一个域名和 IP 地址映射系统. 通过 DNS 我们可以根据比较容易记住的域名而不是数字 IP 地址来访问网络资源.<br>本文主要使用 <code>dig</code> (ubuntu 上可以通过 <code>sudo apt install dnsutils</code> 安装) 工具来了解 DNS 的各方面.</p><span id="more"></span><h2><span id="0x01-cname-和-a-记录">0x01 CNAME 和 A 记录</span></h2><p>在 DNS 中, A 记录值表示的是真正的 IP 地址, 而 CNAME 相当于域名的别名.<br>我们来看一个例子, 新浪的 DNS 解析:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig www.sina.com.cn</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; www.sina.com.cn</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 45272</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4000</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.sina.com.cn.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.sina.com.cn.0INCNAMEspool.grid.sinaedge.com.</span><br><span class="line">spool.grid.sinaedge.com. 280INA222.73.28.96</span><br><span class="line"></span><br><span class="line">;; Query time: 5 msec</span><br><span class="line">;; SERVER: 192.168.1.6#53(192.168.1.6)</span><br><span class="line">;; WHEN: Wed Feb 28 13:37:11 CST 2018</span><br><span class="line">;; MSG SIZE  rcvd: 97</span><br></pre></td></tr></table></figure><p>其中 <code>QUESTION SECTION:</code> 表示我们要查找的是 <code>www.sina.com.cn</code> 的 A 记录, <code>ANSWER SECTION:</code> 返回了记录的结果.<br>这个查询返回了三条记录, 每条记录有五个字段分别代表了: 主机域名, TTL, 类型(IN 表示 Internet), DNS 记录类型以及记录值. DNS 记录类型如下图所示 (图片来自阿里云截图):</p><p>![dns record](/images/dns/dns record.png)</p><p><code>www.sina.com.cn</code> 有一个 CNAME和一个 A记录. 如果我们直接在浏览器中访问 CNAME 值或者 IP 地址, 会发现不能访问.</p><p><img src="/images/dns/error.png" alt="error"></p><p>这是因为新浪服务器拒绝了非 <code>www.sina.com.cn</code> 域名访问. 我们可以构造一个 HTTP header 来实现直接连接 IP 访问新浪:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl 222.73.28.96 -H <span class="string">&quot;Host: www.sina.com.cn&quot;</span></span></span><br></pre></td></tr></table></figure><p>这样就能返回正常的页面.</p><h2><span id="0x02-另一个例子">0x02 另一个例子</span></h2><p>再来看一个例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ dig baidu.com                    </span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; baidu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 23153</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4000</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;baidu.com.INA</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">baidu.com.300INA111.13.101.208</span><br><span class="line">baidu.com.300INA123.125.114.144</span><br><span class="line">baidu.com.300INA220.181.57.216</span><br><span class="line"></span><br><span class="line">;; Query time: 5 msec</span><br><span class="line">;; SERVER: 192.168.1.6#53(192.168.1.6)</span><br><span class="line">;; WHEN: Wed Feb 28 13:53:03 CST 2018</span><br><span class="line">;; MSG SIZE  rcvd: 86</span><br></pre></td></tr></table></figure><p>我们看到 <code>baidu.com</code> 返回了三个 A 记录地址. 那客户端应该选择哪一个作为服务器的 IP 地址呢?<br>这个需要看客户端的实现, 比如使用 <code>gethostbyname</code> 的话会选择一个 IP 地址返回,  <code>getaddrinfo</code> 会返回所有的地址.</p><h2><span id="0x03-ns-记录">0x03 NS 记录</span></h2><p>NS 记录是域名服务器记录，用来指定域名由哪个DNS服务器来进行解析.</p><p><code>dig</code> 可以添加 <code>+trace</code> 参数来获取完整 DNS 解析过程. 还是通过 <code>www.sina.com.cn</code> 作为例子.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig www.sina.com.cn +trace</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; www.sina.com.cn +trace</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.3600INNSd.root-servers.net.</span><br><span class="line">.3600INNSe.root-servers.net.</span><br><span class="line">.3600INNSf.root-servers.net.</span><br><span class="line">.3600INNSg.root-servers.net.</span><br><span class="line">.3600INNSh.root-servers.net.</span><br><span class="line">.3600INNSi.root-servers.net.</span><br><span class="line">.3600INNSj.root-servers.net.</span><br><span class="line">.3600INNSk.root-servers.net.</span><br><span class="line">.3600INNSl.root-servers.net.</span><br><span class="line">.3600INNSm.root-servers.net.</span><br><span class="line">.3600INNSa.root-servers.net.</span><br><span class="line">.3600INNSb.root-servers.net.</span><br><span class="line">.3600INNSc.root-servers.net.</span><br><span class="line">;; Received 1771 bytes from 192.168.1.6#53(192.168.1.6) in 0 ms</span><br><span class="line"></span><br><span class="line">cn.172800INNSb.dns.cn.</span><br><span class="line">cn.172800INNSns.cernet.net.</span><br><span class="line">cn.172800INNSc.dns.cn.</span><br><span class="line">cn.172800INNSd.dns.cn.</span><br><span class="line">cn.172800INNSa.dns.cn.</span><br><span class="line">cn.172800INNSg.dns.cn.</span><br><span class="line">cn.172800INNSf.dns.cn.</span><br><span class="line">cn.172800INNSe.dns.cn.</span><br><span class="line">cn.86400INDS41470 8 2 3623FB6E3B1F69C6855DA1E48D3A38236DD2EDF0380FB018FF538650 EAC2C4DD</span><br><span class="line">cn.86400INDS57724 8 2 5D0423633EB24A499BE78AA22D1C0C9BA36218FF49FD95A4CDF1A4AD 97C67044</span><br><span class="line">cn.86400INRRSIGDS 8 1 86400 20180313050000 20180228040000 41824 . GbRg9UYKus5nqvJxCKVZTaX5j2WYaF2c3jH5XOEPzqgcGp23+U941ZHz nKAXTv8oJq2+dJiRuVnwAD7c+Ge8MBJbd+tpw0jcQ3zs3SiocVhWgF3/ Bjig8ouJsuKukEuF89tx+oqbYjRrau9PFNJBoN2zlVZP1JQYTukYaGeY aK91OtgRuC1yVVQqNstLhU+YWyi7gNKOd31SMSpyvUZDIf+8wQrR6j9y dUb7zex8dk+XFS9/NqOXi6kRQxOPdflXXGieNZRVAnHfKdgO3LsXYmsD 92CY9G7cwj9XShFdYq7GLSirh3c9LvUR4E0VKk6qcr3usgKbmDPumyAv aN+ZwA==</span><br><span class="line">;; Received 754 bytes from 192.33.4.12#53(c.root-servers.net) in 173 ms</span><br><span class="line"></span><br><span class="line">sina.com.cn.86400INNSns3.sina.com.cn.</span><br><span class="line">sina.com.cn.86400INNSns2.sina.com.cn.</span><br><span class="line">sina.com.cn.86400INNSns1.sina.com.cn.</span><br><span class="line">sina.com.cn.86400INNSns4.sina.com.cn.</span><br><span class="line">GICE14DNTMDN31G43AUGVRKTKALVB8QC.com.cn. 21600 IN NSEC31 1 10 AEF123AB HIO2MHL5BSKBHFFRA5I1J58SU91CDLLA NS SOA RRSIG DNSKEY NSEC3PARAM</span><br><span class="line">GICE14DNTMDN31G43AUGVRKTKALVB8QC.com.cn. 21600 IN RRSIGNSEC3 8 3 21600 20180318092826 20180216084403 48018 com.cn. iuUIwe/vd4QLsTo8behQVf8ZPWaU9JsP+gxrUHop+oybuZH+II+kvOBW wTfGHap/n3C7iSevN80Wa2eFeH0QBWif2A30+zfg9hCzVjEEUDulmc1a 4+ltDbv4UZVJpBPRU7n2AgW4UMK/q0vyWqV6oKwmIygj58fhrMkqcrpR CpU=</span><br><span class="line">T1MQAIVAIU5JVK5ON55K8AOCE62H72MI.com.cn. 21600 IN NSEC31 1 10 AEF123AB UQROTQK62NOIM5U43DMF7AMC8JJFRM7T NS DS RRSIG</span><br><span class="line">T1MQAIVAIU5JVK5ON55K8AOCE62H72MI.com.cn. 21600 IN RRSIGNSEC3 8 3 21600 20180311113832 20180209104700 48018 com.cn. I1zxGBgSFJfq5GCrwlukCCkWNeQRcJJu9ydX5OgoH0mdYwVVLGoB2y1D htn8lGc4MMfdbY+zTdlnvYvBHdtFSS2+2eq+ficKzzZQ2CVtDrFm91Eo 0MK+BavvLcE5pkRpIfpI9FIIMrlNaj9cOBwWNR2g1yXfSYWSr5NUFKQG voE=</span><br><span class="line">;; Received 679 bytes from 203.119.25.1#53(a.dns.cn) in 33 ms</span><br><span class="line"></span><br><span class="line">www.sina.com.cn.0INCNAMEspool.grid.sinaedge.com.</span><br><span class="line">;; Received 81 bytes from 61.172.201.254#53(ns2.sina.com.cn) in 5 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们最上面域名为 <code>.</code> (根域名) 的 NS 记录, 一共有 13 条, 代表了 13 台根域名服务器. 接下来是在根域名服务器上查询 <code>cn.</code> (实际中最后一个点去掉) 得到的 8 条 NS 记录, 代表了顶级域名服务器. 然后是顶级域名服务器查询 <code>sina.com.cn</code> 得到的 4 条 NS 记录, 代表了授权域名服务器, 最后授权 DNS 返回了 <code>www.sina.com.cn</code> 的 CNAME 记录.</p><div class="tip">授权域名服务器: 我们知道计算机要上网的话, 必须要设置 DNS (除非只用 IP), 或者 ISP 自动分配 DNS. 这个 DNS 服务器是叫做 LocalDNS, 提供了缓存和递归查询服务. 如果查询一个域名在 LocalDNS 上已经有缓存了, LocalDNS 直接返回结果 (叫做非授权应答); 如果 LocalDNS 上没有这个域名的话, LocalDNS 就要对域名发起递归查找(类似 dig +trace 的过程), 就是从根域名 -> 顶级域名 -> 授权域名查找这个域名, 并将应答返回, 同时缓存应答(可以看出根域名, 顶级域名也是授权域名服务器). 一般宽带运行商和公共DNS服务提供的是 LocalDNS, 域名注册商提供的是授权DNS.</div><p>假如我在阿里云上注册了一个域名 (example.com), 其 NS 记录就是 dns14.hichina.com 和 dns13.hichina.com (万网的授权域名服务器), 我们还可以设置 NS 记录指向其他的授权域名服务器.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大家都知道 DNS (Domain Name System, 域名系统), 是一个域名和 IP 地址映射系统. 通过 DNS 我们可以根据比较容易记住的域名而不是数字 IP 地址来访问网络资源.&lt;br&gt;本文主要使用 &lt;code&gt;dig&lt;/code&gt; (ubuntu 上可以通过 &lt;code&gt;sudo apt install dnsutils&lt;/code&gt; 安装) 工具来了解 DNS 的各方面.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Network" scheme="https://wangbinyq.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Guide</title>
    <link href="https://wangbinyq.github.io/hexo-guide/"/>
    <id>https://wangbinyq.github.io/hexo-guide/</id>
    <published>2018-02-28T16:06:20.000Z</published>
    <updated>2021-09-28T09:26:17.826Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://wangbinyq.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
